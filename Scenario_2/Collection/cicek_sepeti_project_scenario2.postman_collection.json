{
	"info": {
		"_postman_id": "bd7f2cb9-8869-4228-8003-47a044dead3a",
		"name": "cicek_sepeti_project_scenario2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Signup- Successful",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"randomEmail\", _.random(342, 9999)+\"iremu@hotmail.com\")\r",
							"pm.environment.set(\"randomPassword\", _.random(12345678, 20123123213))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"    let body = pm.response.json(); //{access_token: \"...\"}\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(1); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Access token place\", function () {\r",
							"    pm.expect(body[0]==\"access_token\") //first and only place is access_token\r",
							"});\r",
							"\r",
							"pm.test(\"Type of access_token\", function () {\r",
							"     pm.expect(typeof body.access_token == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of access_token\", function () {\r",
							"     pm.expect((body.access_token).length > 10).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- Same account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Tests for: Sign up again\r",
							"    \r",
							"    let body = pm.response.json(); //{statusCode: 409, message: \"User already exist!\", error: \"Conflict\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Conflict\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again message \", function () {\r",
							"     pm.expect(upperLetter.includes(body.message[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message\", function () {\r",
							"     pm.expect(body.message == \"User already exist!\").to.be.true //Sign up again message should be \"User already exist!\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again message \", function () {\r",
							"     pm.expect(typeof body.message == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[1]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Conflict\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email\", \"user_deneme@hotmail.com\")\r",
							"pm.environment.set(\"password\", \"123456789\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- Big email size",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"bigEmail\", _.random(3421212211, 9922232399)+\"iremu@hotmail.com\")\r",
							"pm.environment.set(\"randomPassword\", _.random(12345678, 20123123213))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- Small email size",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"smallEmail\", _.random(0, 10)+\"irem_u@hotmail.com\")\r",
							"pm.environment.set(\"randomPassword\", _.random(12345678, 20123123213))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- No email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"noEmail\", \"\")\r",
							"pm.environment.set(\"randomPassword\", _.random(12345678, 20123123213))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- Big password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"randomEmail\", _.random(342, 9999)+\"iremu@hotmail.com\")\r",
							"pm.environment.set(\"bigPassword\", \"_.random(1212342, 992321399)\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- Small password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"randomEmail\", _.random(342, 9999)+\"iremu@hotmail.com\")\r",
							"pm.environment.set(\"smallPassword\", \"_.random(0, 10)\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- No password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"randomEmail\", _.random(342, 9999)+\"iremu@hotmail.com\")\r",
							"pm.environment.set(\"noPassword\", \"\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signup- No email, no password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"noEmail\", \"\")\r",
							"pm.environment.set(\"noPassword\", \"\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 400, message: [9], error: \"Bad Request\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(3); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Bad Request\");\r",
							"});\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of message\", function(){\r",
							"     pm.expect(body.message.length).to.equal(9); //message size check should be 9\r",
							"})\r",
							"\r",
							"pm.test(\"Type of message keys\", function(){\r",
							"     body.message.every(element => pm.expect(typeof element == \"string\").to.be.true); //keys of the message should be string\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error place\", function () {\r",
							"    pm.expect(body[2]==\"error\") //third place is meerrorssage\r",
							"});\r",
							"  \r",
							"pm.test(\"Upper first letter for sign up again error \", function () {\r",
							"     pm.expect(upperLetter.includes(body.error[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again error\", function () {\r",
							"     pm.expect(body.error == \"Bad Request\").to.be.true //Sign up again error should be \"Conflict\"\r",
							"})\r",
							"\r",
							"pm.test(\"Type of sign up again error \", function () {\r",
							"     pm.expect(typeof body.error == \"string\").to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signup",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin- Successful",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email\", \"user_deneme@hotmail.com\")\r",
							"pm.environment.set(\"password\", \"123456789\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Tests for correct sign in\r",
							"\r",
							"    let body = pm.response.json(); //{access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJfZGVuZW1lQGhvdG1haWwuY29tIiwiaWQiOiJMM1VRQ2tFT0M2elViTmtWRWxhVCIsImlhdCI6MTY0MTc2MjgzMX0.3f9IHmAPkw40NWqMajGaI-_MwoZdYlE_1ZMN8jbutco\"}\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(1); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Access token place\", function () {\r",
							"    pm.expect(body[0]==\"access_token\") //first and only place is access_token\r",
							"});\r",
							"\r",
							"pm.test(\"Type of access_token\", function () {\r",
							"     pm.expect(typeof body.access_token == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of access_token\", function () {\r",
							"     pm.expect((body.access_token).length > 10).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signin",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin- Wrong email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"wrongEmail\", _.random(342, 9999)+\"irem@hotmail.com\")\r",
							"pm.environment.set(\"password\", \"123456789\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 401, message: \"Unauthorized\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(2); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again message \", function () {\r",
							"     pm.expect(upperLetter.includes(body.message[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signin",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin- No email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"noEmail\", \"\")\r",
							"pm.environment.set(\"password\", \"123456789\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 401, message: \"Unauthorized\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(2); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again message \", function () {\r",
							"     pm.expect(upperLetter.includes(body.message[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signin",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin- Wrong password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email\", \"user_deneme@hotmail.com\")\r",
							"pm.environment.set(\"wrongPassword\", \"_.random(342, 9999)\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 401, message: \"Unauthorized\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(2); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again message \", function () {\r",
							"     pm.expect(upperLetter.includes(body.message[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signin",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin- No password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email\", \"user_deneme@hotmail.com\")\r",
							"pm.environment.set(\"noPassword\", \"\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 401, message: \"Unauthorized\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(2); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again message \", function () {\r",
							"     pm.expect(upperLetter.includes(body.message[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signin",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Signin- No email, no password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"noEmail\", \"\")\r",
							"pm.environment.set(\"noPassword\", \"\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let body = pm.response.json(); //{statusCode: 401, message: \"Unauthorized\"}\r",
							"\r",
							"    let upperLetter = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\r",
							"\r",
							"pm.test(\"Type of body \", function () {\r",
							"     pm.expect(typeof body == \"object\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Length of body\", function(){\r",
							"     pm.expect(Object.keys(body).length).to.equal(2); //body size checked\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again status code place\", function () {\r",
							"    pm.expect(body[0]==\"statusCode\") //first place is status code\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Type of status code \", function () {\r",
							"     pm.expect(typeof body.statusCode == \"number\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Sign up again message place\", function () {\r",
							"    pm.expect(body[1]==\"message\") //second place is message\r",
							"});\r",
							"\r",
							"pm.test(\"Type message \", function () {\r",
							"     pm.expect(typeof body.message == \"string\").to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Upper first letter for sign up again message \", function () {\r",
							"     pm.expect(upperLetter.includes(body.message[0])).to.be.true\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseurl}}/api/fe/v1/authorization/signin",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"api",
						"fe",
						"v1",
						"authorization",
						"signin"
					]
				}
			},
			"response": []
		}
	]
}